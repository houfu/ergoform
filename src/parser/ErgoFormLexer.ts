/*
 * Copyright (c) 2019. Ang Hou Fu.
 * Licensed under the MIT License. See LICENSE file in the project root for license information.
 */

// Generated from src/parser/grammars/ErgoForm.g4 by ANTLR 4.6-SNAPSHOT


import {ATN} from "antlr4ts/atn/ATN";
import {ATNDeserializer} from "antlr4ts/atn/ATNDeserializer";
import {CharStream} from "antlr4ts/CharStream";
import {Lexer} from "antlr4ts/Lexer";
import {LexerATNSimulator} from "antlr4ts/atn/LexerATNSimulator";
import {Vocabulary} from "antlr4ts/Vocabulary";
import {VocabularyImpl} from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ErgoFormLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly COLON = 7;
	public static readonly STRING = 8;
	public static readonly NUMBER = 9;
	public static readonly WS = 10;
	public static readonly NEWLINE = 11;
	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "COLON", "STRING", "ESC",
		"UNICODE", "HEX", "SAFECODEPOINT", "NUMBER", "INT", "EXP", "WS", "NEWLINE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'['", "','", "']'", "'{'", "'}'", "';'", "':'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined,
		"COLON", "STRING", "NUMBER", "WS", "NEWLINE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ErgoFormLexer._LITERAL_NAMES, ErgoFormLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ErgoFormLexer.VOCABULARY;
	}

	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ErgoFormLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ErgoForm.g4"; }

	// @Override
	public get ruleNames(): string[] { return ErgoFormLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ErgoFormLexer._serializedATN; }

	// @Override
	public get modeNames(): string[] { return ErgoFormLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\rt\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06" +
		"\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x07\t7\n\t\f\t" +
		"\x0E\t:\v\t\x03\t\x03\t\x03\n\x03\n\x03\n\x05\nA\n\n\x03\v\x03\v\x03\v" +
		"\x03\v\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x05\x0EN\n\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x06\x0ES\n\x0E\r\x0E\x0E\x0ET\x05\x0EW\n\x0E\x03" +
		"\x0E\x05\x0EZ\n\x0E\x03\x0F\x03\x0F\x03\x0F\x07\x0F_\n\x0F\f\x0F\x0E\x0F" +
		"b\v\x0F\x05\x0Fd\n\x0F\x03\x10\x03\x10\x05\x10h\n\x10\x03\x10\x03\x10" +
		"\x03\x11\x06\x11m\n\x11\r\x11\x0E\x11n\x03\x11\x03\x11\x03\x12\x03\x12" +
		"\x02\x02\x02\x13\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07" +
		"\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\x02\x15\x02\x02\x17\x02\x02\x19\x02" +
		"\x02\x1B\x02\v\x1D\x02\x02\x1F\x02\x02!\x02\f#\x02\r\x03\x02\v\n\x02$" +
		"$11^^ddhhppttvv\x05\x022;CHch\x05\x02\x02!$$^^\x03\x022;\x03\x023;\x04" +
		"\x02GGgg\x04\x02--//\x05\x02\v\f\x0F\x0F\"\"\x04\x02\f\f\x0F\x0Fx\x02" +
		"\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02" +
		"\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F" +
		"\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02!" +
		"\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x03%\x03\x02\x02\x02\x05\'\x03\x02" +
		"\x02\x02\x07)\x03\x02\x02\x02\t+\x03\x02\x02\x02\v-\x03\x02\x02\x02\r" +
		"/\x03\x02\x02\x02\x0F1\x03\x02\x02\x02\x113\x03\x02\x02\x02\x13=\x03\x02" +
		"\x02\x02\x15B\x03\x02\x02\x02\x17H\x03\x02\x02\x02\x19J\x03\x02\x02\x02" +
		"\x1BM\x03\x02\x02\x02\x1Dc\x03\x02\x02\x02\x1Fe\x03\x02\x02\x02!l\x03" +
		"\x02\x02\x02#r\x03\x02\x02\x02%&\x07]\x02\x02&\x04\x03\x02\x02\x02\'(" +
		"\x07.\x02\x02(\x06\x03\x02\x02\x02)*\x07_\x02\x02*\b\x03\x02\x02\x02+" +
		",\x07}\x02\x02,\n\x03\x02\x02\x02-.\x07\x7F\x02\x02.\f\x03\x02\x02\x02" +
		"/0\x07=\x02\x020\x0E\x03\x02\x02\x0212\x07<\x02\x022\x10\x03\x02\x02\x02" +
		"38\x07$\x02\x0247\x05\x13\n\x0257\x05\x19\r\x0264\x03\x02\x02\x0265\x03" +
		"\x02\x02\x027:\x03\x02\x02\x0286\x03\x02\x02\x0289\x03\x02\x02\x029;\x03" +
		"\x02\x02\x02:8\x03\x02\x02\x02;<\x07$\x02\x02<\x12\x03\x02\x02\x02=@\x07" +
		"^\x02\x02>A\t\x02\x02\x02?A\x05\x15\v\x02@>\x03\x02\x02\x02@?\x03\x02" +
		"\x02\x02A\x14\x03\x02\x02\x02BC\x07w\x02\x02CD\x05\x17\f\x02DE\x05\x17" +
		"\f\x02EF\x05\x17\f\x02FG\x05\x17\f\x02G\x16\x03\x02\x02\x02HI\t\x03\x02" +
		"\x02I\x18\x03\x02\x02\x02JK\n\x04\x02\x02K\x1A\x03\x02\x02\x02LN\x07/" +
		"\x02\x02ML\x03\x02\x02\x02MN\x03\x02\x02\x02NO\x03\x02\x02\x02OV\x05\x1D" +
		"\x0F\x02PR\x070\x02\x02QS\t\x05\x02\x02RQ\x03\x02\x02\x02ST\x03\x02\x02" +
		"\x02TR\x03\x02\x02\x02TU\x03\x02\x02\x02UW\x03\x02\x02\x02VP\x03\x02\x02" +
		"\x02VW\x03\x02\x02\x02WY\x03\x02\x02\x02XZ\x05\x1F\x10\x02YX\x03\x02\x02" +
		"\x02YZ\x03\x02\x02\x02Z\x1C\x03\x02\x02\x02[d\x072\x02\x02\\`\t\x06\x02" +
		"\x02]_\t\x05\x02\x02^]\x03\x02\x02\x02_b\x03\x02\x02\x02`^\x03\x02\x02" +
		"\x02`a\x03\x02\x02\x02ad\x03\x02\x02\x02b`\x03\x02\x02\x02c[\x03\x02\x02" +
		"\x02c\\\x03\x02\x02\x02d\x1E\x03\x02\x02\x02eg\t\x07\x02\x02fh\t\b\x02" +
		"\x02gf\x03\x02\x02\x02gh\x03\x02\x02\x02hi\x03\x02\x02\x02ij\x05\x1D\x0F" +
		"\x02j \x03\x02\x02\x02km\t\t\x02\x02lk\x03\x02\x02\x02mn\x03\x02\x02\x02" +
		"nl\x03\x02\x02\x02no\x03\x02\x02\x02op\x03\x02\x02\x02pq\b\x11\x02\x02" +
		"q\"\x03\x02\x02\x02rs\t\n\x02\x02s$\x03\x02\x02\x02\x0E\x0268@MTVY`cg" +
		"n\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ErgoFormLexer.__ATN) {
			ErgoFormLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ErgoFormLexer._serializedATN));
		}

		return ErgoFormLexer.__ATN;
	}

}

